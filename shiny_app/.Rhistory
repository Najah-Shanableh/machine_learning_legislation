plot(Nile)
pat(new=T)
par(mfrow=c(1,1))
plot(pred,entire_quad,col=3,ylab="",xlab="Year", type="l",ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)))
par(new=T)
plot(pred,entire_line,ylab="",xlab="",type="l",col=2,ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)))
par(new=T)
plot(Nile)
par(mfrow=c(1,1))
plot(pred,entire_quad,col=3,ylab="",xlab="Year", type="l",ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(pred,entire_line,ylab="",xlab="",type="l",col=2,ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(Nile,xlim=c(1871,1990))
abline(v=1970,lty=2)
par(mfrow=c(1,1))
plot(pred,entire_quad,col=3,ylab="",xlab="Year", type="l",ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(pred,entire_line,ylab="",xlab="",type="l",col=2,ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(Nile,xlim=c(1871,1990),xlab="")
abline(v=1970,lty=2)
par(new=F)
entire_quad
help(Nile)
entire_line
prediction <- quad_1980$coef[1]+quad_1980$coef[2]*110+quad_1980$coef[3]*110^2
source('~/.active-rstudio-document', echo=TRUE)
prediction
summary(pima$test)
source('~/Google Drive/4th Year/Fall 2013/ALM/final/problem2.r', echo=TRUE)
summary(pima$test)
summary(pima)
xtable(summary(pima)
)
un_reg <- lm(glucose~.,data=pima_na)
length(un_reg$coef)
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
prplot(un_reg,7)
help(pima)
plot(un_reg)
plot(g_bt)
par(mfrow=c(4,2))
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
prplot(un_reg,7)
par(mfrow=c(3,2))
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
prplot(un_reg,7)
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
par(mfrow=c(3,2))
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
par(mfrow=c(2,2))
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
prplot(g_bt,2)
prplot(g_bt,3)
prplot(g_bt,4)
prplot(g_bt,5)
par(mfrow=c(2,2))
par(mfrow=c(2,2))
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
par(mfrow=c(3,2))
prplot(un_reg,2)
prplot(un_reg,3)
prplot(un_reg,4)
prplot(un_reg,5)
prplot(un_reg,6)
g <- lm(glucose~diastolic+triceps+log(insulin)+bmi+diabetes+age+test,data=pima_na)
summary(g)
summary(g)
plot(g)
par(mfrow=c(1,1))
plot(g)
summary(g)
xtable(summary(g))
help(pima)
g <- lm(glucose~diastolic+triceps+log(insulin)+bmi+diabetes+age+test,data=pima_na)
par(mfrow=c(3,2))
plot(fitted(g),residuals(g),xlab="Fitted",ylab="Residuals")
abline(h=0,lty=2)
plot(fitted(g),abs(residuals(g)),xlab="Fitted",ylab="Absolute Value of Residuals")
hist(residuals(g),xlab="Residuals",main=" ")
qqnorm(residuals(g),ylab="Residuals")
qqline(residuals(g))
shapiro.test(residuals(g)) #roughly normal so p-value not high enough to reject the assumption
# correlated errors ##
plot(residuals(g),ylab="Residuals")
abline(h=0,lty=2)
plot(residuals(g)[-100],residuals(g)[-1],xlab=expression(hat(epsilon)[i]),ylab=expression(hat(epsilon)[i+1]))
library(lmtest)
dwtest(ols_reg)
dwtest(g)
boxcox(g,plotit=T,lambda=seq(-0.5,0.5,by=.1))
par(mfrow=c(1,1))
par(mfrow=c(1,1))
boxcox(g,plotit=T,lambda=seq(-0.5,0.5,by=.1))
shapiro.test(residuals(g_bt))
par(mfrow=c(3,2))
plot(fitted(g_bt),residuals(g_bt),xlab="Fitted",ylab="Residuals")
abline(h=0,lty=2)
plot(fitted(g_bt),abs(residuals(g_bt)),xlab="Fitted",ylab="Absolute Value of Residuals")
hist(residuals(g_bt),xlab="Residuals",main=" ")
qqnorm(residuals(g_bt),ylab="Residuals")
qqline(residuals(g_bt))
shapiro.test(residuals(g_bt)) #roughly normal so p-value not high enough to reject the assumption
# correlated errors ##
plot(residuals(g_bt),ylab="Residuals")
abline(h=0,lty=2)
plot(residuals(g_bt)[-100],residuals(g_bt)[-1],xlab=expression(hat(epsilon)[i]),ylab=expression(hat(epsilon)[i+1]))
library(lmtest)
dwtest(g_bt) #p-value indicates that there is autocorrelation
summary(g_bt)
xtable(summary(g_bt))
halfnorm(cook,3,ylab="Cook's Distances") ## point 446 is the only influential point
cook <- cooks.distance(g_bt)
par(mfrow=c(1,1))
halfnorm(cook,3,ylab="Cook's Distances") ## point 446 is the only influential point
abs(qt(0.05/(392*2),392-8-1
)
)
jack[which(abs(jack) > abs(qt(0.05/(392*2),392-8-1)))]
cook[123]
cook[348]
pima
pima[446]
pima[446,]
xtable(pima[446,])
help(pima)
g_bt$hat
influence(g_bt)$hat
sort(influence(g_bt)$ha)
sort(influence(g_bt)$hat)
summary(g_bt)
sum((sqrt(lambda[1]/lambda) > 30)[1:234]) ##232
rmse <- function(x,y) sqrt(mean((x-y)^2))
gas_pca <- prcomp(gasoline[1:50,-1])
par(mfrow=c(1,2))
plot(gas_pca$sdev[1:10],type="l",ylab="SD of PC",xlab="PC Index") ## choose 4
mm <- apply(gasoline[1:50,-1],2,mean)
tx <- as.matrix(sweep(gasoline[51:60,-1],2,mm))
rmsgas <- numeric(50)
for(i in 1:50){
nx <- tx %*% gas_pca$rot[,1:i]
print(i)
model3 <- lm(octane~gas_pca$x[,1:i],gasoline[1:50,])
pv <- cbind(1,nx)%*%model3$coef
rmsgas[i] <- rmse(pv,gasoline$octane[51:60])
} ## RMSE minimized at .224 at 4 components
plot(rmsgas, xlab="Number of Components",ylab="Test RMSE")
rmsgas[4]
RMSEP(pcrmod)
pcrmod <- pcr(octane~ ., data=gasoline[1:50,], validation="CV",grpsize=10)
RMSEP(pcrmod) ## best is 8 components; around 0.2435
validationplot(pcrmod,legend="topright")
library(pls)
pcrmod <- pcr(octane~ ., data=gasoline[1:50,], validation="CV",grpsize=10)
RMSEP(pcrmod) ## best is 8 components; around 0.2435
validationplot(pcrmod,legend="topright")
library(pls)
pcrmod <- pcr(octane~ ., data=gasoline[1:50,], validation="CV",grpsize=10)
RMSEP(pcrmod) ## best is 8 components; around 0.2435
par(mfrow=c(1,1))
validationplot(pcrmod,legend="topright") ## RMSE minimized at
pls_cv <- plsr(octane~.,data=gasoline[1:50,],validation="CV")
validationplot(pls_cv,legend="topright")
RMSEP(pls_cv)
ypred <- predict(pls_cv,ncomp=6) ## model error at 0.154
rmse(ypred,gasoline$octane[1:50])
ytpred <- predict(pls_cv,gasoline[51:60,],ncomp=6)
rmse(ytpred,gasoline$octane[51:60]) ## test error at 0.270
ypred <- predict(pls_cv,ncomp=7) ## model error at 0.154
rmse(ypred,gasoline$octane[1:50])
ytpred <- predict(pls_cv,gasoline[51:60,],ncomp=7)
rmse(ytpred,gasoline$octane[51:60]) ## test error at 0.270
RMSEP(pls_cv)
validationplot(pls_cv,legend="topright")
rmse(ytpred,gasoline$octane[51:60]) ## test error at 0.33
ytpred <- predict(pls_cv,gasoline[51:60,],ncomp=7)
rmse(ytpred,gasoline$octane[51:60]) ## test error at 0.33
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
## prediction at break point ##
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction") ## chooses 11 variabels
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$fit
rmse(best_fit,Y_test) #rmse
X <- as.matrix(gasoline[1:50,-1])
Y <- as.matrix(gasoline$octane[1:50])
X_test <- as.matrix(gasoline[51:60,-1])
Y_test <- gasoline$octane[51:60]
#fit
lassoG <- lars(X,Y)
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
## prediction at break point ##
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction") ## chooses 11 variabels
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$fit
rmse(best_fit,Y_test) #rmse
library(lars)
X <- as.matrix(gasoline[1:50,-1])
Y <- as.matrix(gasoline$octane[1:50])
X_test <- as.matrix(gasoline[51:60,-1])
Y_test <- gasoline$octane[51:60]
#fit
lassoG <- lars(X,Y)
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
## prediction at break point ##
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction") ## chooses 11 variabels
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$fit
rmse(best_fit,Y_test) #rmse
gls(Nile~Year,correalation=corAR1(form=~Year),data=nile)
gls(Nile~Year,correlation=corAR1(form=~Year),data=nile)
gls<-gls(Nile~Year,correlation=corAR1(form=~Year),data=nile)
intervals(gls)
rho<-0.400
# part c ##
sigma <- diag(100)
sigma <- rho^abs(row(sigma)-col(sigma))
s_cd <- chol(sigma)
s_cdi <- solve(t(s_cd))
sy <- s_cdi %*% Nile
# intercept model #
int_model <- lm(sy~1)
# linear regression model #
x_lin <- as.matrix(data.frame(rep(1,100),nile$Year))
s_xlin <- s_cdi %*% x_lin
lin_model <- lm(sy~s_xlin-1)
# quadratic model #
x_quad <- as.matrix(data.frame(rep(1,100),nile$Year,nile$Year^2))
s_xquad <- s_cdi %*% x_quad
quad_model <- lm(sy~s_xquad-1)
# tri model #
x_tri <- as.matrix(data.frame(rep(1,100),nile$Year,nile$Year^2,nile$Year^3))
s_xtri <- s_cdi %*% x_tri
tri_model <- lm(sy~s_xtri-1)
# anova f-test results #
anova(int_model,lin_model) # linear regression better
anova(int_model,quad_model) # additional pair of predictors significant
anova(int_model,tri_model) # tri_model significant
anova(lin_model,quad_model) # quad model significant
anova(lin_model,tri_model) # barely significant
anova(quad_model,tri_model) # tri_model not significant
## 1d.) prediction 1970-1990
newdata <- seq(1971,1990)
quad_coef <- quad_model$coef
pred_newq <- quad_coef[1]+quad_coef[2]*newdata + quad_coef[3]*newdata^2
lin_coef <- lin_model$coef
pred_new <- lin_coef[1]+lin_coef[2]*newdata
# comparing one on one #
par(mfrow=c(1,1))
plot(newdata,pred_newq,col=3,ylab="",xlab="Year", type="l",ylim=c(min(pred_newq,pred_new),max(pred_newq,pred_new)))
par(new=T)
plot(newdata,pred_new,ylab="",xlab="",type="l",ylim=c(min(pred_newq,pred_new),max(pred_newq,pred_new)))
par(new=F)
# comparing linear, quad predictions and actually first time series #
pred <- seq(1871,1990)
entire_quad <-quad_model$coef[1]+quad_model$coef[2]*pred+quad_model$coef[3]*pred^2
entire_line <- lin_model$coef[1]+lin_model$coef[2]*pred
par(mfrow=c(1,1))
plot(pred,entire_quad,col=3,ylab="",xlab="Year", type="l",ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(pred,entire_line,ylab="",xlab="",type="l",col=2,ylim=c(min(entire_quad,entire_line,Nile),max(entire_quad,entire_line,Nile)),xlim=c(1871,1990))
par(new=T)
plot(Nile,xlim=c(1871,1990),xlab="")
abline(v=1970,lty=2)
par(new=F)
### MAKE THIS PLOT FANCY ###
# 1e. prediction for 1980 #
x_quad_ci <- as.matrix(data.frame(rep(1,100),nile$Year-1870,(nile$Year-1870)^2))
quad_1980<- lm(sy~s_cdi %*% x_quad_ci-1)
x_1980 <- as.matrix(data.frame(1,1980-1870,110^2))
se_1 <- x_1980%*%solve(t(x_quad_ci) %*% solve(sigma)%*%x_quad_ci)%*%t(x_1980)
se_0 <- sum(residuals(quad_1980)^2)/(100-3)
se_t <- sqrt(se_0+se_1)
interval <- qt(0.975,97)*se_t
prediction <- quad_1980$coef[1]+quad_1980$coef[2]*110+quad_1980$coef[3]*110^2
prediction_lower <- quad_1980$coef[1]+quad_1980$coef[2]*110+quad_1980$coef[3]*110^2-interval
prediction_upper <- quad_1980$coef[1]+quad_1980$coef[2]*110+quad_1980$coef[3]*110^2+interval
pred_vec <- c(prediction_lower,prediction_upper) ## c(654.4905,1236.8049)
prediction
prediction_vec
pred_vec
entire_quad
entire_line <- lin_model$coef[1]+lin_model$coef[2]*pred
entire_quad <-quad_model$coef[1]+quad_model$coef[2]*pred+quad_model$coef[3]*pred^2
entire_qudd
entire_quad
entire_line
par(mfrow=c(1,2))
validationplot(pcrmod_loo,legend="topright") ## RMSE minimized at
# access the CV and ACV values themselves. Nothing short of a nightmare to find
pcrmod_loo <- pcr(octane~ ., data=gasoline[1:50,], validation="LOO")
RMSEP(pcrmod_loo) ## best is 8 components; around 0.2435
validationplot(pcrmod_loo,legend="topright") ## RMSE minimized at
pls_loo <- plsr(octane~.,data=gasoline[1:50,],validation="LOO")
validationplot(pls_loo,legend="topright")
X <- as.matrix(gasoline[1:50,-1])
Y <- as.matrix(gasoline$octane[1:50])
X_test <- as.matrix(gasoline[51:60,-1])
Y_test <- gasoline$octane[51:60]
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction") ## chooses 11 variabels
best_coef
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction")$coef ## chooses 11 variabels
best_coef
best_coef>0
sum(best_coef>0)
lassoG <- lars(X,Y)
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
par(mfrow=c(1,1))
lassoG <- lars(X,Y)
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
lars.min.cv
plot(las_mat$coef)
libary(glmnet)
library(glmnet)
las_mat <- cv.glmnet(X,Y,nfolds=10)
plot(las_mat$coef)
plot(las_mat)
plot(las_mat$coef)
plot(las_mat$glm, xv="lambda")
par(mfrow=c(1,2))
plot(las_mat$glm)
las_mih <- cv.lars(X,Y,K=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
lars.min.cv
best_coef > 0
sum(best_coef > 0)
sum(abs(best_coef > 0))
sum(abs(best_coef) > 0)
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$
$fit
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$fit
best_fit
xtable(best_fit)
xtable(as.table(best_fit))
rmse(best_fit,Y_test) #rmse
plot(las_mat$glm,xv="lambda")
lassoG <- lars(X,Y)
## cross validation ##
las_mih <- cv.lars(X,Y,K=10)
las_mat <- cv.glmnet(X,Y,nfolds=10)
lars.min.cv <- las_mih$index[las_mih$cv==min(las_mih$cv)]
par(mfrow=c(1,2))
plot(las_mat$glm,xv="lambda")
as_mih <- cv.lars(X,Y,K=10)
## prediction at break point ##
best_coef <- predict(lassoG,X_test,s=lars.min.cv,type="coefficient",mode="fraction")$coef ## chooses 11 variabels
best_fit <- predict(lassoG,X_test,s=lars.min.cv,type="fit",mode="fraction")$fit
rmse(best_fit,Y_test) #rmse
getwd()
setwd("Users/Vora_Family/Desktop/monthly_abstracts")
setwd("Users/Vora_Family/Desktop/monthly_abstracts")
setwd("Users/Vora_Family/Desktop)
setwd("Users/Vora_Family/Desktop")
setwd("Users/Vora_Family/Desktop")
setwd("Users/Vora_Family/Desktop")
setwd(Users/Vora_Family/Desktop)
?kmeans
kmeans(c(-1,0,1),centers=2)
(.5-1)^2+.5^2
(-1+.5)^2+.5^2
kmeans(c(-100,0,50),centers=2)
kmeans(c(-50,0,50),centers=2)
kmeans(c(-50,0,50),centers=2)
install.packages('devtools')
install.packages('shinyapps')
install_github( repo = "shinyapps", username="rstudio" )
require(devtools)
install_github( repo = "shinyapps", username="rstudio" )
library(maps)
map('usa')
map('states')
map('state')
map("world2Hires", "USA:Alaska")
library(mapdata)
map("world2Hires", "USA:Alaska")
par(mar=rep(0, 4))
par(mar=rep(0, 4))$names
map("world2Hires", "USA:Alaska")
map("world2Hires", "USA:Alaska")$names
map("world2Hires", "USA:Alaska",col='blue')
map("world2Hires", "USA:Alaska",col='blue',fill=TRUE)
c(2,3,4,5)
c(2,3,4,5)[2:]
c(2,3,4,5)[2:5]
source('~/Desktop/shiny_app/server.R', echo=TRUE)
setwd('~/Desktop/shiny_app/')
source('~/Desktop/shiny_app/server.R', echo=TRUE)
source('~/Desktop/shiny_app/server.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
map("world2Hires", "USA:Hawaii",col=cols_hi,fill=TRUE)
map("world2Hires", "USA:Hawaii",col=cols_hi,fill=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?map
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
library(shinyapps)
deployApp()
setwd("~/Desktop/data_science_tasks/DSSG_Project/shiny_app/")
library(shiny)
library(shinyapps)
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
